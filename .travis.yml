sudo: required

dist: xenial

env:
  global:
    - CHANGE_MINIKUBE_NONE_USER=true
    - MINIKUBE_WANTUPDATENOTIFICATION=false
    - MINIKUBE_WANTREPORTERRORPROMPT=false
    - MINIKUBE_HOME=$HOME
    - CHANGE_MINIKUBE_NONE_USER=true
    - KUBECONFIG=$HOME/.kube/config

services:
  - docker

language: go

go:
  - 1.12.5

addons:
  apt:
    update: true

jobs:
  include:
    - os: linux
      arch: amd64
    - os: linux
      arch: arm64

before_install:
  - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
  - sudo apt-get update -qq
  - sudo apt-get install --yes -qq gcc
  - sudo apt-get install --yes -qq libudev-dev

before_script:
  # Download kubectl and setup minkube for running integration tests
  # Wait for minikube to be up and ready.
  - if [ "$TRAVIS_CPU_ARCH" == "amd64" ]; then
      curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.13.0/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/ ;
      curl -Lo minikube https://storage.googleapis.com/minikube/releases/v0.35.0/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/ ;
      mkdir -p $HOME/.kube $HOME/.minikube ;
      touch $KUBECONFIG ;
      sudo minikube start --vm-driver=none --kubernetes-version=v1.13.0 ;
      sudo chown -R travis /home/travis/.minikube/ ;
      JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; done ;
    fi

script:
  - ./openebs-build.sh
  # Verify that minkube is setup
  # kubectl cluster-info;
  # kubectl get deployment;
  - if [ "$TRAVIS_CPU_ARCH" == "amd64" ]; then
      ./openebs-ci.sh ;
    fi

after_success:
  - git describe --tags --always
  - ./openebs-deploy.sh

branches:
  only:
  - release
  - /^\d+\.\d+(\.\d+)?(-\S*)?$/
  - /^v\d+\.\d+(\.\S*)?$/
